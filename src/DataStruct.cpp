#define _USE_MATH_DEFINES
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <sstream>
#include <queue>
#include <math.h>
using namespace std;

//data
struct WorkStation {
	int type;//
	double x_pos;
	double y_pos;
	int status;
	int material;
	int production;
	
	//????????
	//????1-3 material?0
	//????4-6 ??????????????????
	vector<DirectionDistance> material_vector[10];//index [1,6]?????? index[self]?????????? ??sort by totalProfit/totalFrame
	DirectionDistance sellStation;//?????????????????????????
	int materialFrame;//?? ????????????????
	int productFrame;//?? ????????????
	double materialProfit;//?? ??????????????????
	double pathProfit;//=?? ????????+?????????+???????????? ?? ?????????+???????? ??
	double pathProfitRate;//????��??????
public:
	WorkStation(int type, double x_pos, double y_pos, int status, int material, int prduction) {
		this->type = type;
		this->x_pos = x_pos;
		this->y_pos = y_pos;
		this->status = status;
		this->material = material;
		this->production = production;

	}
};

struct MaterialPrice {
	int buyPrice;
	int sellPrice;
public:
	MaterialPrice(int buyPrice, int sellPrice) {
		this->buyPrice = buyPrice;
		this->sellPrice = sellPrice;
	}
};



struct DirectionDistance {
	int directID;	//??????ID
	double distance;//????????
	int directFrame;//?��?????
	int totalFrame;//???????+?????????????
	double profit;  //??????��????
	double totalProfit;//??????��????+??????????????
	double profitRate;//?????? perFrame


};


fstream fout("status.log", ios::out);
stringstream ss;
extern vector<WorkStation>workStation;//index [0,49]
extern vector<Robot>robot;

//vector<WorkStation> priority_workStation;
extern vector<int> workStation_type[10];//index [1,9],???ID

int frameID;
int money;
extern int workStationNum;
